'''
Арифметические операции
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=1778

Сложение: +
Вычитание: -
Умножение: *
Деление: /
Возведение в степень: **
Целочисленное деление: //
Остаток от деления: %
'''
print('Работаем с числами', 5, 'и', 2) # Вызываем функцию print для печати сообщения
print(5 + 2) # Вызываем функцию print, которая выведет результат сложения 5 и 2
print(5 - 2) # Вызываем функцию print, которая выведет разность 5 и 2
print(5 * 2) # Вызываем функцию print, которая выведет произведение 5 и 2
print(5 / 2) # Вызываем функцию print, которая выведет частное 5 и 2
print(5 // 2) # Вызываем функцию print, которая выведет результат целочисленного деления 5 на 2
print('Результат остатка от деления:', 5 % 2) # Вызываем функцию print, которая выведет остаток от деления 5 на 2
print('Результат возведения в степени:', 5 ** 2) # Вызываем функцию print, которая выведет результат возведения в квадрат числа 5

'''
Задача 2
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=2125
Найти площадь круга с радиусом R=5. Подсказка: площадь круга вычисляется по формуле S=π∗R2,π ~ 3.14
'''
# Решение задачи
print('Площадь круга равна:', 3.14 * 5 ** 2)

'''
Переменные и типы переменных
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=2954
Результаты операций и манипуляций иногда нужно сохранять, поэтому мы определяем переменные 
- именованные объекты, которым присваиваем значения.
'''
# Задаем значения переменных
S = 100 # Создаем переменную S и присваиваем ей значение 100
pi_ = 3.14 # Создаем переменную pi_  и присваиваем ей значение 3.14
r = (S / pi_) ** (0.5) # Создаем переменную r и присваиваем ей значение, которое получается в  результате (S / pi_) ** (0.5)
print('r', round(r,2), sep='=')  # Вызываем функцию print, которая выведет переменную r, округленную до двух знаков после запятой

'''
Задача 3
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=3376
Найти площадь круга с радиусом R=5. Подсказка: площадь круга вычисляется по формуле S=π∗R2,π ~ 3.14
Создайте переменную r со значением 5
Создайте переменную pi_ со значением 3.14
Сохраните результат вычисления в переменную S
Выведите на печать результаты
'''
# Решение задачи
r = 5
pi_ = 3.14
S = pi_ * r ** 2
print('Площадь круга равна:', S)

'''
input()
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=3624
Функция для ввода данных в программу с клавиатуры.
Обязательных аргументов нет. Можно передавать строчку, которая будет выведена перед ячейкой ввода.
'''
name = input('Введите ваше имя: ') # Вызываем функцию input с приветственным сообщением,
# которая позволяет вводить данные с клавиатуры и записываем введенные данные в переменную name
print('Меня зовут ', name) # Вызываем функцию print, которая выведет значение переменной name

'''
Основные типы данных:
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=3786

int (integer numbers) - целые числа
float (floating-point numbers) - числа с плавающей точкой
str (string) - строки
bool (boolean) - логический тип
'''
print(type(r)) # Вызываем функцию print, которая выведет тип переменной r
print(type(S)) # Вызываем функцию print, которая выведет тип переменной S

text = 'Площадь круга' # Создаем переменную с именем text и присваиваем ей значение "Площадь круга"
print(type(text)) # Вызываем функцию print, которая выведет тип переменной text

x = False # Создаем переменную с именем x и присваиваем ей значение True
print(type(x)) # Вызываем функцию print, которая выведет тип переменной x

'''
Если нужно поменять тип переменной, то полезны функции:

int() - возвращает целочисленную переменную
float() - возвращает нецелочисленную переменную
bool() - возвращает булеву переменную
str() - возвращает строковую переменную
'''
print(r, type(r)) # Вызываем функцию print, которая выведет значение и тип переменной r
r_new = str(r) # Создадим переменную r_new и запишем в нее значение переменной r, преобразованной к типу str (строковый)
print(r_new, type(r_new)) # Вызываем функцию print, которая выведет значение и тип переменной r_new
print('Радиус ' + 'круга: ' + r_new) # Вызываем функцию print, которая выведет радиус круга, записанный в переменной r_new

# Конкатенация строк
conc = 'Мое имя' + ' ' + 'Дмитрий' # Создадим переменную conc и запишем в нее резуьтат конкатенации 3 текстовых значения
print(conc) # Вызываем функцию print, которая выведет значение переменной conc

print(10 - float(r_new)) # Вызываем функцию print, которая выведет разность 10 и переменной r_new, преобразованной к типу float

'''
Базовые конструкции
Логические выражения
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=4431

По аналогии с арифметическими выражениями существуют логические выражения, которые могут быть истинными или ложными. 
Простое логическое выражение имеет вид
<арифметическое выражение> <знак сравнения> <арифметическое выражение>.
Например, если у нас есть переменные x и y с какими-то значениями, то логическое выражение
x + y < 3y
в качестве первого арифметического выражения имеет x + y, в качестве знака сравнения < (меньше), а второе арифметическое выражение в нём 3y.

Логические выражения:

< меньше
> больше
<= меньше или равно
>= больше или равно
== равно
!= не равно
'''

2 != 3 # Проверяем на неравенство 2 и 3

x = 2 * 2 == 5 # Создаем переменную x и присваиваем ей результат выражения 2 * 2 == 5
print(type(x)) # Вызываем функцию print, которая выведет тип переменной x
print(x) # Вызываем функцию print, которая выведет значение переменной x
print(int(x)) # Вызываем функцию print, которая выведет значение переменной x, преобразованной к типу int

x = 2 * 2 != 5 # Создаем переменную x и присваиваем ей результат выражения 2 * 2 != 5
print(type(x)) # Вызываем функцию print, которая выведет тип переменной x
print(x) # Вызываем функцию print, которая выведет значение переменной x
print(int(x)) # Вызываем функцию print, которая выведет значение переменной x, преобразованной к типу int

'''
Чтобы записать сложное логическое выражение, часто бывает необходимо воспользоваться логическими связками "и", "или" и "не". 
В Питоне они обозначаются как and, or и not соответственно. Операции and и or являеются бинарными, 
т.е. должны быть записаны между операндами, например x < 3 or y > 2. 
Операция not - унарная и должна быть записана перед единственным своим операндом.
x   y     x and y
 0   0        0
 0   1        0
 1   0        0
 1   1        1
 
 x   y     x or y
 0   0        0
 0   1        1
 1   0        1
 1   1        1
 
 x       not x
 0          1
 1          0
'''
x = 4 # Создаем переменную x и присваиваем ей значение 4
y = 5 # Создаем переменную y и присваиваем ей значение 5
print(x > 3 and y > 3) # Вызываем функцию print, которая выведет результат выражения (x > 3 and y > 3)
print(x > y or x == y) # Вызываем функцию print, которая выведет результат выражения (x > y or x == y)
print(not (x > y)) # Вызываем функцию print, которая выведет результат выражения (not (x > y))

a = 1 # Создаем переменную a и присваиваем ей значение 1
b = 2 # Создаем переменную b и присваиваем ей значение 2
c = 3 # Создаем переменную c и присваиваем ей значение 3
d = 4 # Создаем переменную d и присваиваем ей значение 4

((a == d) and (a > c)) != 4 # Считаем значение выражения

((False) and (False)) != 4 # Считаем значение выражения

False != 4 # Проверяем на неравенство False и 4

'''
Задача 4
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=5141

Сравните  2 в кубе  и  3 в квадрате . Результат распечатайте.
'''
# Место для решения
a = 2 ** 3
b = 3 ** 2
print(a, b)
print (a == b)
print (a > b)
print (a < b)

'''
Задача 5
Напишите логическое выражение для проверки попадания введенного числа в интервал от 0 до 10.
'''
# Место для решения
value = int(input ('Введите число ') )

0 <= value <= 10
print(0 <= value <= 10)

'''
Условный оператор
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=5344

Наиболее частое применение логические выражения находят в условных операторах.

Синтаксис в питоне:
if условие_1:
  команды
elif условие_2:
  команды
elif условие_3:
  команды
  ...
elif условие_N:
  команды
else:
  команды
'''
x = 2 ** 3   # Создаем переменную x и присваиваем ей значение 2 ** 3
y = 3 ** 2   # Создаем переменную y и присваиваем ей значение 3 ** 2

if x > y: # Если x > y
    print('X больше Y') # то вызываем функцию print, которая выведет фразу: 'X больше Y'
    print(x - y) # И вызываем фугкцию print, которая выведет разность x и y
else: # В противном случае (если x >= y)
    print('') # Вызвываем функцию print, которая выведет пустую строку
    print('Y не меньше, чем X') # и вызываем функцию print, которая выведет фразу: 'Y не меньше, чем X'

x = int(input('Введите число X: ')) # Вызываем функцию input (просим пользователя ввести число X) и
                                    # записываем введенные данные в переменную x (при этом преобразуем их к типу int)
y = int(input('Введите число Y: ')) # Вызываем функцию input (просим пользователя ввести число Y) и
                                    # записываем введенные данные в переменную y (при этом преобразуем их к типу int)

if x > y: # Если x > y
    print('X больше Y') # то вызываем функцию print, которая выведет фразу: 'X больше Y'
    print('x - y = ', x - y) # И вызываем фугкцию print, которая выведет разность x и y
elif y > x: # в противном случае, если y > x
    print('Y больше X') # то вызываем функцию print, которая выведет фразу: 'Y больше X'
    print('y - x = ', y - x) # И вызываем фугкцию print, которая выведет разность y и x
else: # в противном случае (x равен y)
    print('X равно Y') # вызываем функцию print, которая выведет фразу: 'X равно Y'

'''
Задача 6
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=5663

Вас позвали на конференцию, которая будет проходить в другом городе, 
но времени до выезда осталось не так много. 
Напишите своим коллегам как можно быстрее, что вы думаете об этой идее.

Если до вылета остается меньше 8 часов, то вы навряд ли успеете на самолет, 
так что должна появиться строчка 
"К сожалению, я не успеваю!", иначе - "Ждите меня у входа в аэропорт".
'''
# Место для решения
hours = int(input ('Сколько часов осталось до вылета?'))
if hours < 0:
  print ('Самолет уже улетел :)')
elif hours < 8:
  print('К сожалению, я не успеваю!')
else:
  print('Ждите меня у входа в аэропорт')

'''
2) Вас позвали на конференцию, которая будет проходить в другом городе, 
но времени до выезда осталось не так много, 
к тому же вы не знаете, получится ли взять выходной. 
Необходимо проверить ближайшие рейсы и предупредить начальство. 
Напишите своим коллегам как можно быстрее, что вы думаете об этой идее.

Если до вылета остается больше 8 часов, а до начальства вы не добрались, то напишите: 
"Предупредите, пожалуйста, шефа о конференции". 
Если вы успеваете везде, напишите: "Ждите меня у входа в аэропорт".
В случае, когда остается меньше 8 часов и начальство не в курсе, 
то должна появиться строчка "К сожалению, я не успеваю!"
'''
# Введите любое число
hours = int(input('Время до вылета: '))
# Введите да или нет
boss = input('Начальство предупреждено? ')

if hours > 8 and boss == 'да':
    print("Ждите меня у входа в аэропорт")

elif hours > 8 and boss == 'нет':
    print("Предупредите, пожалуйста, шефа о конференции")

else:
    print("К сожалению, я не успеваю!")

'''
Цикл while
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=6523
Циклические конструкции используются для многократного повторения одних и тех же действий.
В цикле while команды выполняются до тех пор, пока некоторое заданное условие верно. 
При этом, если в теле цикла прямо не прописана процедура изменения переменной, 
заданной в условии, то получится бесконечный цикл.
Структура цикла while:
'''
value = 3 # Создаем переменную layers_num и записываем в нее значение 3

while value > 0: # Пока значение переменной layers_num > 0
    print('Это многослойная сеть', value) # Вызываем функцию print, которая напечатает фразу 'Это многослойная сеть'
    value -=1 # Уменьшаем значение переменной layers_num на 1 (то же самое, что и layers_num = layers_num - 1)

'''
Задача 7
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=6891

По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, в порядке возрастания.
'''
# Место для решения
N = int(input('Введите целое число: '))
i = 1
while i ** 2 < N:
    print(i ** 2)
    i += 1

i = 1
while  i <= 10:
  if i == 4:
    i+=1
    continue
  print(i)
  i+=1

'''
Цикл for
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=7387

Команды в цикле for выполняются для заданного списка объектов и повторяются столько раз, сколько этих объектов.

Дословно это работает так:

Питон, для каждого объекта из списка объектов выполни, пожалуйста, вот это действие :)

Функция range(n)
Функция range выдает последовательность чисел в зависимости от заданных параметров.

Синтаксис функции:
'''
for i in range(10): # Создаем цикл for, в котором переменная i поочередно будет принимать значения от 0 до 9
    print(i) # Вызываем функцию print, которая выводит значение переменной i

for i in range(3, 12): # Создаем цикл for, в котором переменная i поочередно будет принимать значения от 3 до 11
    print(i) # Вызываем функцию print, которая выводит значение переменной i

for i in range(3, 12, 2): # Создаем цикл for, в котором переменная i поочередно будет принимать значения от 3 до 11 c шагом 2
    print(i) # Вызываем функцию print, которая выводит значение переменной i

for i in range(1, 5): # Создаем цикл for, в котором переменная i поочередно будет принимать значения от 1 до 4
    print(i) # Вызываем функцию print, которая выводит значение переменной i

for animal in ['кошка', 'собака', 'енот', 'лиса']: # Создаем цикл for, в котором переменная animal
                                                   # поочередно будет принимать значения из последовательности
                                                   # 'кошка', 'собака', 'енот', 'лиса'
    print(animal) # Вызываем функцию print, которая выводит значение переменной animal

'''
Задача 8
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=7685

По данному целому числу N распечатайте все квадраты натуральных чисел, не превосходящие N, 
в порядке возрастания с использованием цикла for
'''
# Место для решения
N = int(input('Введите целое число: '))
for i in range(1, N):
  if i ** 2 > N:
    break
  print(i ** 2)

'''
Базовые структуры
Список (list)
Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=7812

Среди наших коллег провели опрос о том, 
какие ассоциации вызывает каждое из времен года. 
Итог опроса показал среди топовых ассоциаций следующие:
'''
zima = 'снег' # Создаем переменную zima и записываем в нее значение 'снег'
vesna = 'солнце' # Создаем переменную vesna и записываем в нее значение 'солнце'
leto = 'фрукты' # Создаем переменную leto и записываем в нее значение 'фрукты'
osen = 'листья' # Создаем переменную osen и записываем в нее значение 'листья'

# Но это не очень удобно, можно хранить всю информацию в одной переменной:

associations = ['снег', 'солнце', 'фрукты', 'листья'] # Создаем список значений
print(associations) # Вызываем функцию print, которая выводит значения списка associations

a1 = list() # Создаем пустой список a1
a2 = [] # Создаем пустой список a2
print(a1) # Вызываем функцию print, которая выводит значения списка a1
print(a2) # Вызываем функцию print, которая выводит значения списка a2

# В списке можно хранить информацию разных типов:

my_list = [20, 'город', 0.45, 2 + 3j] # Создаем список из элементов различных типов
print(my_list) # Вызываем функцию print, которая выводит значения списка my_list

# К элементам списка можно обращаться по индексу:

associations[0]  # Вызываем функцию print, которая выводит значение 0-го элемента списка associations

for el in range(-4, 0): # Создаем цикл for, в котором переменная el поочередно будет принимать значения от -4 до -1
    print('Это значение индекса: {}, а это элемент списка: {}'.format(el, associations[el])) # Вызываем функцию print,
                        # которая выводит значение переменной el и значение элемента списка associations с индексом el

# Листы можно итерировать естественным способом:

for a in associations: # Создаем цикл for, в котором переменная a поочередно будет принимать значения из списка associations
    print(a)  # Вызываем функцию print, которая выводит значение элемента списка associations с индексом a

for i in range(4): # Создаем цикл for, в котором переменная i поочередно будет принимать значения от 0 до 3
    print(associations[i]) # Вызываем функцию print, которая выводит значение элемента списка associations с индексом i

# А еще бывает лист из листов :)

associations = [['Зима', 'снег'], ['Весна', 'солнце'], ['Лето', 'фрукты'], ['Осень', 'листья']]
                                                    # Создаем список, элементы которого также являются списками
print(associations) # Вызываем функцию print, которая выводит список associations

for el in associations: # Создаем цикл for, в котором переменная el поочередно будет принимать значения из списка associations
    print('время года: {}, ассоциация: {}'.format(el[0], el[1])) # Вызываем функцию print, которая выводит 0-е и 1-е значение элемента el

'''
Есть много методов, т.е. функций, которые присущи только листам, для работы с листами:

Методы

list.append(x) Добавляет элемент в конец списка
list.extend(L) Расширяет список list, добавляя в конец все элементы списка L
list.insert(i, x) Вставляет на i-ый элемент значение x
list.remove(x) Удаляет первый элемент в списке, имеющий значение x ValueError, если такого элемента не существует
list.pop([i]) Удаляет i-ый элемент и возвращает его. Если индекс не указан, удаляется последний элемент
list.index(x, [start [, end]]) Возвращает положение первого элемента со значением x (при этом поиск ведется от start до end)
list.count(x) Возвращает количество элементов со значением x
list.sort([key=функция]) Сортирует список на основе функции
list.reverse() Разворачивает список
list.copy() Поверхностная копия списка
list.clear() Очищает список
'''

# Словарь (dict)
# Разбор данного раздела: https://youtu.be/jCuRzL4BSkU?t=8678
my_dict = {'Зима' : 'снег',
           'Весна' : 'солнце',
           'Лето' : 'фрукты',
           'Осень' : 'листья'
          } # Создаем словарь значение

print(my_dict) # Отображаем созданный словарь

# У словаря есть 'ключи' и 'значения':

my_dict.keys() # Вызываем метод .keys(), который вернет набор ключей словаря
my_dict.values() # Вызываем метод .keys(), который вернет набор значений словаря
my_dict.items() # Вызываем метод .items(), который вернет набор пар: ключ-значение
my_dict['Зима'] # Получаем значение элемента словаря с ключом 'Зима'

element = my_dict.pop('Зима') # Удаляем из словаря элемент с ключом 'Зима' и записываем значение по этому ключу в переменную element
print(element) # Вызываем функцию print, которая выводит значение переменной element
print(my_dict) # Вызываем функцию print, которая выводит словарь my_dict

